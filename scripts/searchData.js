pages = [{"l":"api/index.html","n":"meow","t":"meow","d":"","k":"static"},
{"l":"api/meow.html","n":"meow","t":"package meow","d":"meow","k":"package"},
{"l":"api/meow/Show.html","n":"Show","t":"trait Show[A]","d":"meow/Show","k":"trait"},
{"l":"api/meow/Show.html","n":"show","t":"def show(a: A): String","d":"meow/Show","k":"def"},
{"l":"api/meow/Show$.html","n":"Show","t":"object Show","d":"meow/Show$","k":"object"},
{"l":"api/meow/Show$.html","n":"derived","t":"given derived","d":"meow/Show$","k":"given"},
{"l":"api/meow/Show$$given_Show_BigInt$.html","n":"given_Show_BigInt","t":"given given_Show_BigInt: Show[BigInt]","d":"meow/Show$","k":"given"},
{"l":"api/meow/Show$$given_Show_BigInt$.html","n":"show","t":"def show(a: BigInt): String","d":"meow/Show$","k":"def"},
{"l":"api/meow/Show$$given_Show_Boolean$.html","n":"given_Show_Boolean","t":"given given_Show_Boolean: Show[Boolean]","d":"meow/Show$","k":"given"},
{"l":"api/meow/Show$$given_Show_Boolean$.html","n":"show","t":"def show(a: Boolean): String","d":"meow/Show$","k":"def"},
{"l":"api/meow/Show$$given_Show_Char$.html","n":"given_Show_Char","t":"given given_Show_Char: Show[Char]","d":"meow/Show$","k":"given"},
{"l":"api/meow/Show$$given_Show_Char$.html","n":"show","t":"def show(a: Char): String","d":"meow/Show$","k":"def"},
{"l":"api/meow/Show$$given_Show_Double$.html","n":"given_Show_Double","t":"given given_Show_Double: Show[Double]","d":"meow/Show$","k":"given"},
{"l":"api/meow/Show$$given_Show_Double$.html","n":"show","t":"def show(a: Double): String","d":"meow/Show$","k":"def"},
{"l":"api/meow/Show$$given_Show_Float$.html","n":"given_Show_Float","t":"given given_Show_Float: Show[Float]","d":"meow/Show$","k":"given"},
{"l":"api/meow/Show$$given_Show_Float$.html","n":"show","t":"def show(a: Float): String","d":"meow/Show$","k":"def"},
{"l":"api/meow/Show$$given_Show_Functor.html","n":"given_Show_Functor","t":"given given_Show_Functor[F[_]]: Show[Functor[F]]","d":"meow/Show$","k":"given"},
{"l":"api/meow/Show$$given_Show_Functor.html","n":"show","t":"def show(a: Functor[F]): String","d":"meow/Show$","k":"def"},
{"l":"api/meow/Show$$given_Show_Int$.html","n":"given_Show_Int","t":"given given_Show_Int: Show[Int]","d":"meow/Show$","k":"given"},
{"l":"api/meow/Show$$given_Show_Int$.html","n":"show","t":"def show(a: Int): String","d":"meow/Show$","k":"def"},
{"l":"api/meow/Show$$given_Show_List.html","n":"given_Show_List","t":"given given_Show_List[A]: Show[List[A]]","d":"meow/Show$","k":"given"},
{"l":"api/meow/Show$$given_Show_List.html","n":"show","t":"def show(a: List[A]): String","d":"meow/Show$","k":"def"},
{"l":"api/meow/Show$$given_Show_Long$.html","n":"given_Show_Long","t":"given given_Show_Long: Show[Long]","d":"meow/Show$","k":"given"},
{"l":"api/meow/Show$$given_Show_Long$.html","n":"show","t":"def show(a: Long): String","d":"meow/Show$","k":"def"},
{"l":"api/meow/Show$$given_Show_Map.html","n":"given_Show_Map","t":"given given_Show_Map[A, B]: Show[Map[A, B]]","d":"meow/Show$","k":"given"},
{"l":"api/meow/Show$$given_Show_Map.html","n":"show","t":"def show(a: Map[A, B]): String","d":"meow/Show$","k":"def"},
{"l":"api/meow/Show$$given_Show_Option.html","n":"given_Show_Option","t":"given given_Show_Option[A]: Show[Option[A]]","d":"meow/Show$","k":"given"},
{"l":"api/meow/Show$$given_Show_Option.html","n":"show","t":"def show(a: Option[A]): String","d":"meow/Show$","k":"def"},
{"l":"api/meow/Show$$given_Show_String$.html","n":"given_Show_String","t":"given given_Show_String: Show[String]","d":"meow/Show$","k":"given"},
{"l":"api/meow/Show$$given_Show_String$.html","n":"show","t":"def show(a: String): String","d":"meow/Show$","k":"def"},
{"l":"api/meow/Show$$given_Show_Unit$.html","n":"given_Show_Unit","t":"given given_Show_Unit: Show[Unit]","d":"meow/Show$","k":"given"},
{"l":"api/meow/Show$$given_Show_Unit$.html","n":"show","t":"def show(a: Unit): String","d":"meow/Show$","k":"def"},
{"l":"api/meow/Show$$given_Show_Vector.html","n":"given_Show_Vector","t":"given given_Show_Vector[A]: Show[Vector[A]]","d":"meow/Show$","k":"given"},
{"l":"api/meow/Show$$given_Show_Vector.html","n":"show","t":"def show(a: Vector[A]): String","d":"meow/Show$","k":"def"},
{"l":"api/meow/Show$.html","n":"show","t":"def show[A](a: A)(using s: Show[A]): String","d":"meow/Show$","k":"def"},
{"l":"api/meow/Show$$given_Show_BigInt$.html","n":"given_Show_BigInt","t":"given given_Show_BigInt: Show[BigInt]","d":"meow/Show$$given_Show_BigInt$","k":"given"},
{"l":"api/meow/Show$$given_Show_BigInt$.html","n":"show","t":"def show(a: BigInt): String","d":"meow/Show$$given_Show_BigInt$","k":"def"},
{"l":"api/meow/Show$$given_Show_Boolean$.html","n":"given_Show_Boolean","t":"given given_Show_Boolean: Show[Boolean]","d":"meow/Show$$given_Show_Boolean$","k":"given"},
{"l":"api/meow/Show$$given_Show_Boolean$.html","n":"show","t":"def show(a: Boolean): String","d":"meow/Show$$given_Show_Boolean$","k":"def"},
{"l":"api/meow/Show$$given_Show_Char$.html","n":"given_Show_Char","t":"given given_Show_Char: Show[Char]","d":"meow/Show$$given_Show_Char$","k":"given"},
{"l":"api/meow/Show$$given_Show_Char$.html","n":"show","t":"def show(a: Char): String","d":"meow/Show$$given_Show_Char$","k":"def"},
{"l":"api/meow/Show$$given_Show_Double$.html","n":"given_Show_Double","t":"given given_Show_Double: Show[Double]","d":"meow/Show$$given_Show_Double$","k":"given"},
{"l":"api/meow/Show$$given_Show_Double$.html","n":"show","t":"def show(a: Double): String","d":"meow/Show$$given_Show_Double$","k":"def"},
{"l":"api/meow/Show$$given_Show_Float$.html","n":"given_Show_Float","t":"given given_Show_Float: Show[Float]","d":"meow/Show$$given_Show_Float$","k":"given"},
{"l":"api/meow/Show$$given_Show_Float$.html","n":"show","t":"def show(a: Float): String","d":"meow/Show$$given_Show_Float$","k":"def"},
{"l":"api/meow/Show$$given_Show_Functor.html","n":"given_Show_Functor","t":"given given_Show_Functor[F[_]]: Show[Functor[F]]","d":"meow/Show$$given_Show_Functor","k":"given"},
{"l":"api/meow/Show$$given_Show_Functor.html","n":"show","t":"def show(a: Functor[F]): String","d":"meow/Show$$given_Show_Functor","k":"def"},
{"l":"api/meow/Show$$given_Show_Int$.html","n":"given_Show_Int","t":"given given_Show_Int: Show[Int]","d":"meow/Show$$given_Show_Int$","k":"given"},
{"l":"api/meow/Show$$given_Show_Int$.html","n":"show","t":"def show(a: Int): String","d":"meow/Show$$given_Show_Int$","k":"def"},
{"l":"api/meow/Show$$given_Show_List.html","n":"given_Show_List","t":"given given_Show_List[A]: Show[List[A]]","d":"meow/Show$$given_Show_List","k":"given"},
{"l":"api/meow/Show$$given_Show_List.html","n":"show","t":"def show(a: List[A]): String","d":"meow/Show$$given_Show_List","k":"def"},
{"l":"api/meow/Show$$given_Show_Long$.html","n":"given_Show_Long","t":"given given_Show_Long: Show[Long]","d":"meow/Show$$given_Show_Long$","k":"given"},
{"l":"api/meow/Show$$given_Show_Long$.html","n":"show","t":"def show(a: Long): String","d":"meow/Show$$given_Show_Long$","k":"def"},
{"l":"api/meow/Show$$given_Show_Map.html","n":"given_Show_Map","t":"given given_Show_Map[A, B]: Show[Map[A, B]]","d":"meow/Show$$given_Show_Map","k":"given"},
{"l":"api/meow/Show$$given_Show_Map.html","n":"show","t":"def show(a: Map[A, B]): String","d":"meow/Show$$given_Show_Map","k":"def"},
{"l":"api/meow/Show$$given_Show_Option.html","n":"given_Show_Option","t":"given given_Show_Option[A]: Show[Option[A]]","d":"meow/Show$$given_Show_Option","k":"given"},
{"l":"api/meow/Show$$given_Show_Option.html","n":"show","t":"def show(a: Option[A]): String","d":"meow/Show$$given_Show_Option","k":"def"},
{"l":"api/meow/Show$$given_Show_String$.html","n":"given_Show_String","t":"given given_Show_String: Show[String]","d":"meow/Show$$given_Show_String$","k":"given"},
{"l":"api/meow/Show$$given_Show_String$.html","n":"show","t":"def show(a: String): String","d":"meow/Show$$given_Show_String$","k":"def"},
{"l":"api/meow/Show$$given_Show_Unit$.html","n":"given_Show_Unit","t":"given given_Show_Unit: Show[Unit]","d":"meow/Show$$given_Show_Unit$","k":"given"},
{"l":"api/meow/Show$$given_Show_Unit$.html","n":"show","t":"def show(a: Unit): String","d":"meow/Show$$given_Show_Unit$","k":"def"},
{"l":"api/meow/Show$$given_Show_Vector.html","n":"given_Show_Vector","t":"given given_Show_Vector[A]: Show[Vector[A]]","d":"meow/Show$$given_Show_Vector","k":"given"},
{"l":"api/meow/Show$$given_Show_Vector.html","n":"show","t":"def show(a: Vector[A]): String","d":"meow/Show$$given_Show_Vector","k":"def"},
{"l":"api/meow/prelude$.html","n":"prelude","t":"object prelude","d":"meow/prelude$","k":"object"},
{"l":"api/meow/prelude$.html","n":"<$","t":"def <$[F[_], A, B](fb: F[B])(using x$3: Functor[F]): F[A]","d":"meow/prelude$","k":"def"},
{"l":"api/meow/prelude$.html","n":"<$>","t":"def <$>[F[_], A, B](fa: F[A])(using x$3: Functor[F]): F[B]","d":"meow/prelude$","k":"def"},
{"l":"api/meow/prelude$.html","n":"Applicative_List","t":"given Applicative_List: given_Applicative_List","d":"meow/prelude$","k":"given"},
{"l":"api/meow/prelude$.html","n":"Applicative_Option","t":"given Applicative_Option: given_Applicative_Option","d":"meow/prelude$","k":"given"},
{"l":"api/meow/prelude$.html","n":"Applicative_Vector","t":"given Applicative_Vector: given_Applicative_Vector","d":"meow/prelude$","k":"given"},
{"l":"api/meow/prelude$.html","n":"Functor_Id","t":"given Functor_Id: given_Functor_Id","d":"meow/prelude$","k":"given"},
{"l":"api/meow/prelude$.html","n":"Functor_List","t":"given Functor_List: given_Functor_List","d":"meow/prelude$","k":"given"},
{"l":"api/meow/prelude$.html","n":"Functor_Option","t":"given Functor_Option: given_Functor_Option","d":"meow/prelude$","k":"given"},
{"l":"api/meow/prelude$.html","n":"Functor_Vector","t":"given Functor_Vector: given_Functor_Vector","d":"meow/prelude$","k":"given"},
{"l":"api/meow/prelude$.html","n":"MonadError_Unit_Option","t":"given MonadError_Unit_Option: given_MonadError_Unit_Option","d":"meow/prelude$","k":"given"},
{"l":"api/meow/prelude$.html","n":"Monad_List","t":"given Monad_List: given_Monad_List","d":"meow/prelude$","k":"given"},
{"l":"api/meow/prelude$.html","n":"Monad_Option","t":"given Monad_Option: given_Monad_Option","d":"meow/prelude$","k":"given"},
{"l":"api/meow/prelude$.html","n":"Monoid_String","t":"given Monoid_String: given_Monoid_String","d":"meow/prelude$","k":"given"},
{"l":"api/meow/prelude$.html","n":"Monoid_Unit","t":"given Monoid_Unit: given_Monoid_Unit","d":"meow/prelude$","k":"given"},
{"l":"api/meow/prelude$.html","n":"Semigroup_Int","t":"given Semigroup_Int: given_Semigroup_Int","d":"meow/prelude$","k":"given"},
{"l":"api/meow/prelude$.html","n":"Semigroup_String","t":"given Semigroup_String: given_Semigroup_String","d":"meow/prelude$","k":"given"},
{"l":"api/meow/prelude$.html","n":"Semigroup_Unit","t":"given Semigroup_Unit: given_Semigroup_Unit","d":"meow/prelude$","k":"given"},
{"l":"api/meow/prelude$.html","n":"genFunctor","t":"given genFunctor","d":"meow/prelude$","k":"given"},
{"l":"api/meow/prelude$.html","n":"run","t":"def run[A]: Future[A]","d":"meow/prelude$","k":"def"},
{"l":"api/meow/prelude$.html","n":"~>","t":"type ~>[-F[_], +G[_]] = [A] => (x$1: F[A]) => G[A]","d":"meow/prelude$","k":"type"},
{"l":"api/meow/control.html","n":"meow.control","t":"package meow.control","d":"meow/control","k":"package"},
{"l":"api/meow/control/apRan.html","n":"apRan","t":"given apRan[G[_]]: Applicative[[_] =>> Ran[G, G, _$13]]","d":"meow/control","k":"given"},
{"l":"api/meow/control/apRan.html","n":"liftA2","t":"def liftA2[A, B, C](f: A => B => C): Ran[G, G, A] => Ran[G, G, B] => Ran[G, G, C]","d":"meow/control","k":"def"},
{"l":"api/meow/control/apRan.html","n":"pure","t":"def pure[A](a: A): Ran[G, G, A]","d":"meow/control","k":"def"},
{"l":"api/meow/control/given_Functor_Ran.html","n":"given_Functor_Ran","t":"given given_Functor_Ran[G[_], H[_]]: Functor[[_] =>> Ran[G, H, _$11]]","d":"meow/control","k":"given"},
{"l":"api/meow/control/given_Functor_Ran.html","n":"fmap","t":"def fmap[A, B](f: A => B): Ran[G, H, A] => Ran[G, H, B]","d":"meow/control","k":"def"},
{"l":"api/meow/control/given_Monad_Ran.html","n":"given_Monad_Ran","t":"given given_Monad_Ran[G[_]]: Monad[[_] =>> Ran[G, G, _$15]]","d":"meow/control","k":"given"},
{"l":"api/meow/control/given_Monad_Ran.html","n":"bind","t":"def bind[A, B](f: A => Ran[G, G, B]): Ran[G, G, A] => Ran[G, G, B]","d":"meow/control","k":"def"},
{"l":"api/meow/control/Applicative.html","n":"Applicative","t":"trait Applicative[F[_]]","d":"meow/control/Applicative","k":"trait"},
{"l":"api/meow/control/Applicative.html","n":"*>","t":"def *>[A, B](fb: F[B]): F[B]","d":"meow/control/Applicative","k":"def"},
{"l":"api/meow/control/Applicative.html","n":"<*","t":"def <*[A, B](fb: F[B]): F[A]","d":"meow/control/Applicative","k":"def"},
{"l":"api/meow/control/Applicative.html","n":"<**>","t":"def <**>[A, B](fab: F[A => B]): F[B]","d":"meow/control/Applicative","k":"def"},
{"l":"api/meow/control/Applicative.html","n":"<*>","t":"def <*>[A, B](fa: F[A]): F[B]","d":"meow/control/Applicative","k":"def"},
{"l":"api/meow/control/Applicative.html","n":"liftA2","t":"def liftA2[A, B, C](f: A => B => C): F[A] => F[B] => F[C]","d":"meow/control/Applicative","k":"def"},
{"l":"api/meow/control/Applicative.html","n":"pure","t":"def pure[A](a: A): F[A]","d":"meow/control/Applicative","k":"def"},
{"l":"api/meow/control/Applicative.html","n":"unless","t":"def unless[A, B](cond: Boolean): F[Unit]","d":"meow/control/Applicative","k":"def"},
{"l":"api/meow/control/Applicative.html","n":"when","t":"def when[A, B](cond: Boolean): F[Unit]","d":"meow/control/Applicative","k":"def"},
{"l":"api/meow/control/Applicative$.html","n":"Applicative","t":"object Applicative","d":"meow/control/Applicative$","k":"object"},
{"l":"api/meow/control/Applicative$$given_Applicative_Either.html","n":"given_Applicative_Either","t":"given given_Applicative_Either[E]: Applicative[[_] =>> Either[E, _$9]]","d":"meow/control/Applicative$","k":"given"},
{"l":"api/meow/control/Applicative$$given_Applicative_Either.html","n":"liftA2","t":"def liftA2[A, B, C](f: A => B => C): Either[E, A] => Either[E, B] => Either[E, C]","d":"meow/control/Applicative$","k":"def"},
{"l":"api/meow/control/Applicative$$given_Applicative_Either.html","n":"pure","t":"def pure[A](a: A): Either[E, A]","d":"meow/control/Applicative$","k":"def"},
{"l":"api/meow/control/Applicative$$given_Applicative_Function.html","n":"given_Applicative_Function","t":"given given_Applicative_Function[R]: Applicative[[_] =>> R => _$8]","d":"meow/control/Applicative$","k":"given"},
{"l":"api/meow/control/Applicative$$given_Applicative_Function.html","n":"liftA2","t":"def liftA2[A, B, C](f: A => B => C): R => A => R => B => R => C","d":"meow/control/Applicative$","k":"def"},
{"l":"api/meow/control/Applicative$$given_Applicative_Function.html","n":"pure","t":"def pure[A](a: A): R => A","d":"meow/control/Applicative$","k":"def"},
{"l":"api/meow/control/Applicative$$given_Applicative_List$.html","n":"given_Applicative_List","t":"given given_Applicative_List: Applicative[List]","d":"meow/control/Applicative$","k":"given"},
{"l":"api/meow/control/Applicative$$given_Applicative_List$.html","n":"liftA2","t":"def liftA2[A, B, C](f: A => B => C): List[A] => List[B] => List[C]","d":"meow/control/Applicative$","k":"def"},
{"l":"api/meow/control/Applicative$$given_Applicative_List$.html","n":"pure","t":"def pure[A](a: A): List[A]","d":"meow/control/Applicative$","k":"def"},
{"l":"api/meow/control/Applicative$$given_Applicative_Option$.html","n":"given_Applicative_Option","t":"given given_Applicative_Option: Applicative[[A] =>> Option[A]]","d":"meow/control/Applicative$","k":"given"},
{"l":"api/meow/control/Applicative$$given_Applicative_Option$.html","n":"liftA2","t":"def liftA2[A, B, C](f: A => B => C): Option[A] => Option[B] => Option[C]","d":"meow/control/Applicative$","k":"def"},
{"l":"api/meow/control/Applicative$$given_Applicative_Option$.html","n":"pure","t":"def pure[A](a: A): Option[A]","d":"meow/control/Applicative$","k":"def"},
{"l":"api/meow/control/Applicative$$given_Applicative_Vector$.html","n":"given_Applicative_Vector","t":"given given_Applicative_Vector: Applicative[Vector]","d":"meow/control/Applicative$","k":"given"},
{"l":"api/meow/control/Applicative$$given_Applicative_Vector$.html","n":"liftA2","t":"def liftA2[A, B, C](f: A => B => C): Vector[A] => Vector[B] => Vector[C]","d":"meow/control/Applicative$","k":"def"},
{"l":"api/meow/control/Applicative$$given_Applicative_Vector$.html","n":"pure","t":"def pure[A](a: A): Vector[A]","d":"meow/control/Applicative$","k":"def"},
{"l":"api/meow/control/Applicative$.html","n":"liftA","t":"def liftA[F[_]]: [A, B] => (f: A => B) => F[A] => Applicative[F] => F[B]","d":"meow/control/Applicative$","k":"def"},
{"l":"api/meow/control/Applicative$.html","n":"liftA2","t":"def liftA2[F[_]]: [A, B, C] => (f: A => B => C) => Applicative[F] => F[A] => F[B] => F[C]","d":"meow/control/Applicative$","k":"def"},
{"l":"api/meow/control/Applicative$.html","n":"liftA3","t":"def liftA3[F[_]]: [A, B, C, D] => (f: A => B => C => D) => F[A] => F[B] => F[C] => Applicative[F] => F[D]","d":"meow/control/Applicative$","k":"def"},
{"l":"api/meow/control/Applicative$.html","n":"pure","t":"def pure[F[_]]: [A] => (a: A) => Applicative[F] => F[A]","d":"meow/control/Applicative$","k":"def"},
{"l":"api/meow/control/Applicative$.html","n":"unless","t":"def unless[F[_]]: Boolean => [A] => (doThing: F[A]) => Applicative[F] => F[Unit]","d":"meow/control/Applicative$","k":"def"},
{"l":"api/meow/control/Applicative$.html","n":"when","t":"def when[F[_]]: Boolean => [A] => (doThing: F[A]) => Applicative[F] => F[Unit]","d":"meow/control/Applicative$","k":"def"},
{"l":"api/meow/control/Applicative$$given_Applicative_Either.html","n":"given_Applicative_Either","t":"given given_Applicative_Either[E]: Applicative[[_] =>> Either[E, _$9]]","d":"meow/control/Applicative$$given_Applicative_Either","k":"given"},
{"l":"api/meow/control/Applicative$$given_Applicative_Either.html","n":"liftA2","t":"def liftA2[A, B, C](f: A => B => C): Either[E, A] => Either[E, B] => Either[E, C]","d":"meow/control/Applicative$$given_Applicative_Either","k":"def"},
{"l":"api/meow/control/Applicative$$given_Applicative_Either.html","n":"pure","t":"def pure[A](a: A): Either[E, A]","d":"meow/control/Applicative$$given_Applicative_Either","k":"def"},
{"l":"api/meow/control/Applicative$$given_Applicative_Function.html","n":"given_Applicative_Function","t":"given given_Applicative_Function[R]: Applicative[[_] =>> R => _$8]","d":"meow/control/Applicative$$given_Applicative_Function","k":"given"},
{"l":"api/meow/control/Applicative$$given_Applicative_Function.html","n":"liftA2","t":"def liftA2[A, B, C](f: A => B => C): R => A => R => B => R => C","d":"meow/control/Applicative$$given_Applicative_Function","k":"def"},
{"l":"api/meow/control/Applicative$$given_Applicative_Function.html","n":"pure","t":"def pure[A](a: A): R => A","d":"meow/control/Applicative$$given_Applicative_Function","k":"def"},
{"l":"api/meow/control/Applicative$$given_Applicative_List$.html","n":"given_Applicative_List","t":"given given_Applicative_List: Applicative[List]","d":"meow/control/Applicative$$given_Applicative_List$","k":"given"},
{"l":"api/meow/control/Applicative$$given_Applicative_List$.html","n":"liftA2","t":"def liftA2[A, B, C](f: A => B => C): List[A] => List[B] => List[C]","d":"meow/control/Applicative$$given_Applicative_List$","k":"def"},
{"l":"api/meow/control/Applicative$$given_Applicative_List$.html","n":"pure","t":"def pure[A](a: A): List[A]","d":"meow/control/Applicative$$given_Applicative_List$","k":"def"},
{"l":"api/meow/control/Applicative$$given_Applicative_Option$.html","n":"given_Applicative_Option","t":"given given_Applicative_Option: Applicative[[A] =>> Option[A]]","d":"meow/control/Applicative$$given_Applicative_Option$","k":"given"},
{"l":"api/meow/control/Applicative$$given_Applicative_Option$.html","n":"liftA2","t":"def liftA2[A, B, C](f: A => B => C): Option[A] => Option[B] => Option[C]","d":"meow/control/Applicative$$given_Applicative_Option$","k":"def"},
{"l":"api/meow/control/Applicative$$given_Applicative_Option$.html","n":"pure","t":"def pure[A](a: A): Option[A]","d":"meow/control/Applicative$$given_Applicative_Option$","k":"def"},
{"l":"api/meow/control/Applicative$$given_Applicative_Vector$.html","n":"given_Applicative_Vector","t":"given given_Applicative_Vector: Applicative[Vector]","d":"meow/control/Applicative$$given_Applicative_Vector$","k":"given"},
{"l":"api/meow/control/Applicative$$given_Applicative_Vector$.html","n":"liftA2","t":"def liftA2[A, B, C](f: A => B => C): Vector[A] => Vector[B] => Vector[C]","d":"meow/control/Applicative$$given_Applicative_Vector$","k":"def"},
{"l":"api/meow/control/Applicative$$given_Applicative_Vector$.html","n":"pure","t":"def pure[A](a: A): Vector[A]","d":"meow/control/Applicative$$given_Applicative_Vector$","k":"def"},
{"l":"api/meow/control/Lan.html","n":"Lan","t":"enum Lan[G[_], H[_], A]","d":"meow/control/Lan","k":"enum"},
{"l":"api/meow/control/Lan$$LeftKan.html","n":"LeftKan","t":"case LeftKan[G[_], H[_], A, B](f: G[B] => A, v: H[B]) extends Lan[G, H, A]","d":"meow/control/Lan","k":"case"},
{"l":"api/meow/control/Lan$$LeftKan.html","n":"LeftKan","t":"case LeftKan[G[_], H[_], A, B](f: G[B] => A, v: H[B]) extends Lan[G, H, A]","d":"meow/control/Lan$$LeftKan","k":"case"},
{"l":"api/meow/control/Lan$.html","n":"Lan","t":"object Lan","d":"meow/control/Lan$","k":"object"},
{"l":"api/meow/control/Lan$.html","n":"fromLan","t":"def fromLan[K[_], G[_], H[_], B](s: [A] => (x$1: Lan[G, H, A]) => K[A])(hb: H[B]): K[G[B]]","d":"meow/control/Lan$","k":"def"},
{"l":"api/meow/control/Lan$.html","n":"glan","t":"def glan[G[_], H[_]]: [A] => (x$1: H[A]) => Lan[G, H, G[A]]","d":"meow/control/Lan$","k":"def"},
{"l":"api/meow/control/Lan$.html","n":"toLan","t":"def toLan[K[_], G[_], H[_], B](nat: [A] => (x$1: H[A]) => K[G[A]])(lan: Lan[G, H, B])(using Functor[K]): K[B]","d":"meow/control/Lan$","k":"def"},
{"l":"api/meow/control/Monad.html","n":"Monad","t":"trait Monad[M[_]]","d":"meow/control/Monad","k":"trait"},
{"l":"api/meow/control/Monad.html","n":"<=<","t":"def <=<[A, B, C](ff: C => M[A]): C => M[B]","d":"meow/control/Monad","k":"def"},
{"l":"api/meow/control/Monad.html","n":"=<<","t":"def =<<[A, B, C](ma: M[A]): M[B]","d":"meow/control/Monad","k":"def"},
{"l":"api/meow/control/Monad.html","n":">=>","t":"def >=>[A, B, C](ff: B => M[C]): A => M[C]","d":"meow/control/Monad","k":"def"},
{"l":"api/meow/control/Monad.html","n":">>","t":"def >>[A, B](fb: M[B]): M[B]","d":"meow/control/Monad","k":"def"},
{"l":"api/meow/control/Monad.html","n":">>=","t":"def >>=[A, B](f: A => M[B]): M[B]","d":"meow/control/Monad","k":"def"},
{"l":"api/meow/control/Monad.html","n":"bind","t":"def bind[A, B](f: A => M[B]): M[A] => M[B]","d":"meow/control/Monad","k":"def"},
{"l":"api/meow/control/Monad.html","n":"flatMap","t":"def flatMap[A, B](f: A => M[B]): M[B]","d":"meow/control/Monad","k":"def"},
{"l":"api/meow/control/Monad.html","n":"flatten","t":"def flatten[A]: M[A]","d":"meow/control/Monad","k":"def"},
{"l":"api/meow/control/Monad$.html","n":"Monad","t":"object Monad","d":"meow/control/Monad$","k":"object"},
{"l":"api/meow/control/Monad$.html","n":"flatMap","t":"def flatMap[M[_]]: [A, B] => (f: A => M[B]) => Monad[M] => M[A] => M[B]","d":"meow/control/Monad$","k":"def"},
{"l":"api/meow/control/Monad$.html","n":"flatten","t":"def flatten[M[_], A]: M[M[A]] => Monad[M] => M[A]","d":"meow/control/Monad$","k":"def"},
{"l":"api/meow/control/Monad$$given_Monad_Either.html","n":"given_Monad_Either","t":"given given_Monad_Either[E]: Monad[[_] =>> Either[E, _$5]]","d":"meow/control/Monad$","k":"given"},
{"l":"api/meow/control/Monad$$given_Monad_Either.html","n":"bind","t":"def bind[A, B](f: A => Either[E, B]): Either[E, A] => Either[E, B]","d":"meow/control/Monad$","k":"def"},
{"l":"api/meow/control/Monad$$given_Monad_List$.html","n":"given_Monad_List","t":"given given_Monad_List: Monad[List]","d":"meow/control/Monad$","k":"given"},
{"l":"api/meow/control/Monad$$given_Monad_List$.html","n":"bind","t":"def bind[A, B](f: A => List[B]): List[A] => List[B]","d":"meow/control/Monad$","k":"def"},
{"l":"api/meow/control/Monad$$given_Monad_Option$.html","n":"given_Monad_Option","t":"given given_Monad_Option: Monad[[A] =>> Option[A]]","d":"meow/control/Monad$","k":"given"},
{"l":"api/meow/control/Monad$$given_Monad_Option$.html","n":"bind","t":"def bind[A, B](f: A => Option[B]): Option[A] => Option[B]","d":"meow/control/Monad$","k":"def"},
{"l":"api/meow/control/Monad$$given_Monad_Either.html","n":"given_Monad_Either","t":"given given_Monad_Either[E]: Monad[[_] =>> Either[E, _$5]]","d":"meow/control/Monad$$given_Monad_Either","k":"given"},
{"l":"api/meow/control/Monad$$given_Monad_Either.html","n":"bind","t":"def bind[A, B](f: A => Either[E, B]): Either[E, A] => Either[E, B]","d":"meow/control/Monad$$given_Monad_Either","k":"def"},
{"l":"api/meow/control/Monad$$given_Monad_List$.html","n":"given_Monad_List","t":"given given_Monad_List: Monad[List]","d":"meow/control/Monad$$given_Monad_List$","k":"given"},
{"l":"api/meow/control/Monad$$given_Monad_List$.html","n":"bind","t":"def bind[A, B](f: A => List[B]): List[A] => List[B]","d":"meow/control/Monad$$given_Monad_List$","k":"def"},
{"l":"api/meow/control/Monad$$given_Monad_Option$.html","n":"given_Monad_Option","t":"given given_Monad_Option: Monad[[A] =>> Option[A]]","d":"meow/control/Monad$$given_Monad_Option$","k":"given"},
{"l":"api/meow/control/Monad$$given_Monad_Option$.html","n":"bind","t":"def bind[A, B](f: A => Option[B]): Option[A] => Option[B]","d":"meow/control/Monad$$given_Monad_Option$","k":"def"},
{"l":"api/meow/control/Ran.html","n":"Ran","t":"class Ran[G[_], H[_], A](run: [B] => (x$1: A => G[B]) => H[B])","d":"meow/control/Ran","k":"class"},
{"l":"api/meow/control/Ran$.html","n":"Ran","t":"object Ran","d":"meow/control/Ran$","k":"object"},
{"l":"api/meow/control/Ran$.html","n":"fromRan","t":"def fromRan[K[_], G[_], H[_], B](kran: [A] => (x$1: K[A]) => Ran[G, H, A])(kgb: K[G[B]]): H[B]","d":"meow/control/Ran$","k":"def"},
{"l":"api/meow/control/Ran$.html","n":"toRan","t":"def toRan[K[_], G[_], H[_], B](nat: [A] => (x$1: K[G[A]]) => H[A])(kb: K[B])(using Functor[K]): Ran[G, H, B]","d":"meow/control/Ran$","k":"def"},
{"l":"api/meow/control/apRan.html","n":"apRan","t":"given apRan[G[_]]: Applicative[[_] =>> Ran[G, G, _$13]]","d":"meow/control/apRan","k":"given"},
{"l":"api/meow/control/apRan.html","n":"liftA2","t":"def liftA2[A, B, C](f: A => B => C): Ran[G, G, A] => Ran[G, G, B] => Ran[G, G, C]","d":"meow/control/apRan","k":"def"},
{"l":"api/meow/control/apRan.html","n":"pure","t":"def pure[A](a: A): Ran[G, G, A]","d":"meow/control/apRan","k":"def"},
{"l":"api/meow/control/given_Functor_Ran.html","n":"given_Functor_Ran","t":"given given_Functor_Ran[G[_], H[_]]: Functor[[_] =>> Ran[G, H, _$11]]","d":"meow/control/given_Functor_Ran","k":"given"},
{"l":"api/meow/control/given_Functor_Ran.html","n":"fmap","t":"def fmap[A, B](f: A => B): Ran[G, H, A] => Ran[G, H, B]","d":"meow/control/given_Functor_Ran","k":"def"},
{"l":"api/meow/control/given_Monad_Ran.html","n":"given_Monad_Ran","t":"given given_Monad_Ran[G[_]]: Monad[[_] =>> Ran[G, G, _$15]]","d":"meow/control/given_Monad_Ran","k":"given"},
{"l":"api/meow/control/given_Monad_Ran.html","n":"bind","t":"def bind[A, B](f: A => Ran[G, G, B]): Ran[G, G, A] => Ran[G, G, B]","d":"meow/control/given_Monad_Ran","k":"def"},
{"l":"api/meow/control/mtl.html","n":"meow.control.mtl","t":"package meow.control.mtl","d":"meow/control/mtl","k":"package"},
{"l":"api/meow/control/mtl/MonadError.html","n":"MonadError","t":"trait MonadError[E, M[_]](using monad: Monad[M])","d":"meow/control/mtl/MonadError","k":"trait"},
{"l":"api/meow/control/mtl/MonadError.html","n":"catchError","t":"def catchError[A](ma: M[A]): E => M[A] => M[A]","d":"meow/control/mtl/MonadError","k":"def"},
{"l":"api/meow/control/mtl/MonadError.html","n":"recover","t":"def recover[A](f: E => M[A]): M[A]","d":"meow/control/mtl/MonadError","k":"def"},
{"l":"api/meow/control/mtl/MonadError.html","n":"throwError","t":"def throwError[A](e: E): M[A]","d":"meow/control/mtl/MonadError","k":"def"},
{"l":"api/meow/control/mtl/MonadError$.html","n":"MonadError","t":"object MonadError","d":"meow/control/mtl/MonadError$","k":"object"},
{"l":"api/meow/control/mtl/MonadError$.html","n":"catchError","t":"def catchError[M[_], E, A](ma: M[A])(using me: MonadError[E, M]): E => M[A] => M[A]","d":"meow/control/mtl/MonadError$","k":"def"},
{"l":"api/meow/control/mtl/MonadError$$given_MonadError_E_Either.html","n":"given_MonadError_E_Either","t":"given given_MonadError_E_Either[E]: MonadError[E, [_] =>> Either[E, _$5]]","d":"meow/control/mtl/MonadError$","k":"given"},
{"l":"api/meow/control/mtl/MonadError$$given_MonadError_E_Either.html","n":"catchError","t":"def catchError[A](ma: Either[E, A]): E => Either[E, A] => Either[E, A]","d":"meow/control/mtl/MonadError$","k":"def"},
{"l":"api/meow/control/mtl/MonadError$$given_MonadError_E_Either.html","n":"throwError","t":"def throwError[A](e: E): Either[E, A]","d":"meow/control/mtl/MonadError$","k":"def"},
{"l":"api/meow/control/mtl/MonadError$$given_MonadError_Unit_Option$.html","n":"given_MonadError_Unit_Option","t":"given given_MonadError_Unit_Option: MonadError[Unit, [A] =>> Option[A]]","d":"meow/control/mtl/MonadError$","k":"given"},
{"l":"api/meow/control/mtl/MonadError$$given_MonadError_Unit_Option$.html","n":"catchError","t":"def catchError[A](ma: Option[A]): Unit => Option[A] => Option[A]","d":"meow/control/mtl/MonadError$","k":"def"},
{"l":"api/meow/control/mtl/MonadError$$given_MonadError_Unit_Option$.html","n":"throwError","t":"def throwError[A](e: Unit): Option[A]","d":"meow/control/mtl/MonadError$","k":"def"},
{"l":"api/meow/control/mtl/MonadError$.html","n":"throwError","t":"def throwError[M[_], E](e: E): [A] => (m: MonadError[E, M]) => M[A]","d":"meow/control/mtl/MonadError$","k":"def"},
{"l":"api/meow/control/mtl/MonadError$$given_MonadError_E_Either.html","n":"given_MonadError_E_Either","t":"given given_MonadError_E_Either[E]: MonadError[E, [_] =>> Either[E, _$5]]","d":"meow/control/mtl/MonadError$$given_MonadError_E_Either","k":"given"},
{"l":"api/meow/control/mtl/MonadError$$given_MonadError_E_Either.html","n":"catchError","t":"def catchError[A](ma: Either[E, A]): E => Either[E, A] => Either[E, A]","d":"meow/control/mtl/MonadError$$given_MonadError_E_Either","k":"def"},
{"l":"api/meow/control/mtl/MonadError$$given_MonadError_E_Either.html","n":"throwError","t":"def throwError[A](e: E): Either[E, A]","d":"meow/control/mtl/MonadError$$given_MonadError_E_Either","k":"def"},
{"l":"api/meow/control/mtl/MonadError$$given_MonadError_Unit_Option$.html","n":"given_MonadError_Unit_Option","t":"given given_MonadError_Unit_Option: MonadError[Unit, [A] =>> Option[A]]","d":"meow/control/mtl/MonadError$$given_MonadError_Unit_Option$","k":"given"},
{"l":"api/meow/control/mtl/MonadError$$given_MonadError_Unit_Option$.html","n":"catchError","t":"def catchError[A](ma: Option[A]): Unit => Option[A] => Option[A]","d":"meow/control/mtl/MonadError$$given_MonadError_Unit_Option$","k":"def"},
{"l":"api/meow/control/mtl/MonadError$$given_MonadError_Unit_Option$.html","n":"throwError","t":"def throwError[A](e: Unit): Option[A]","d":"meow/control/mtl/MonadError$$given_MonadError_Unit_Option$","k":"def"},
{"l":"api/meow/control/mtl/MonadReader.html","n":"MonadReader","t":"trait MonadReader[R, M[_]]","d":"meow/control/mtl/MonadReader","k":"trait"},
{"l":"api/meow/control/mtl/MonadReader.html","n":"ask","t":"def ask: M[R]","d":"meow/control/mtl/MonadReader","k":"def"},
{"l":"api/meow/control/mtl/MonadReader.html","n":"local","t":"def local[A](rr: R => R): M[A] => M[A]","d":"meow/control/mtl/MonadReader","k":"def"},
{"l":"api/meow/control/mtl/MonadReader.html","n":"reader","t":"def reader[A](f: R => A): M[A]","d":"meow/control/mtl/MonadReader","k":"def"},
{"l":"api/meow/control/mtl/MonadState.html","n":"MonadState","t":"trait MonadState[S, M[_]]","d":"meow/control/mtl/MonadState","k":"trait"},
{"l":"api/meow/control/mtl/MonadState.html","n":"get","t":"def get: M[S]","d":"meow/control/mtl/MonadState","k":"def"},
{"l":"api/meow/control/mtl/MonadState.html","n":"put","t":"def put[A](s: S): M[Unit]","d":"meow/control/mtl/MonadState","k":"def"},
{"l":"api/meow/control/mtl/MonadState$.html","n":"MonadState","t":"object MonadState","d":"meow/control/mtl/MonadState$","k":"object"},
{"l":"api/meow/control/mtl/MonadState$.html","n":"get","t":"def get[M[_]](implicit evidence$4: Functor[M], evidence$5: Applicative[M], evidence$6: Monad[M]): [S] => (ms: MonadState[S, M]) => M[S]","d":"meow/control/mtl/MonadState$","k":"def"},
{"l":"api/meow/control/mtl/MonadState$.html","n":"gets","t":"def gets[M[_]](implicit evidence$11: Functor[M], evidence$12: Monad[M]): [S, A] => (f: S => A) => MonadState[S, M] => M[A]","d":"meow/control/mtl/MonadState$","k":"def"},
{"l":"api/meow/control/mtl/MonadState$.html","n":"modify","t":"def modify[M[_]](implicit evidence$10: Monad[M]): [S] => (f: S => S) => MonadState[S, M] => M[Unit]","d":"meow/control/mtl/MonadState$","k":"def"},
{"l":"api/meow/control/mtl/MonadState$.html","n":"put","t":"def put[M[_]](implicit evidence$7: Functor[M], evidence$8: Applicative[M], evidence$9: Monad[M]): [S] => (ms: MonadState[S, M]) => S => M[Unit]","d":"meow/control/mtl/MonadState$","k":"def"},
{"l":"api/meow/control/trans.html","n":"meow.control.trans","t":"package meow.control.trans","d":"meow/control/trans","k":"package"},
{"l":"api/meow/control/trans.html","n":"OptionT","t":"type OptionT[M[_], A]","d":"meow/control/trans","k":"type"},
{"l":"api/meow/control/trans.html","n":"Reader","t":"type Reader[R, A]","d":"meow/control/trans","k":"type"},
{"l":"api/meow/control/trans.html","n":"ReaderT","t":"type ReaderT[R, M[_], A]","d":"meow/control/trans","k":"type"},
{"l":"api/meow/control/trans/MonadTrans.html","n":"MonadTrans","t":"trait MonadTrans[T[_[_], _], M[_]]","d":"meow/control/trans/MonadTrans","k":"trait"},
{"l":"api/meow/control/trans/MonadTrans.html","n":"lift","t":"def lift[A](ma: M[A]): T[M, A]","d":"meow/control/trans/MonadTrans","k":"def"},
{"l":"api/meow/control/trans/MonadTrans$.html","n":"MonadTrans","t":"object MonadTrans","d":"meow/control/trans/MonadTrans$","k":"object"},
{"l":"api/meow/control/trans/MonadTrans$.html","n":"lift","t":"def lift[T[_[_], _], M[_], A](ma: M[A])(implicit evidence$4: Functor[M], evidence$5: Applicative[M], evidence$6: Monad[M], mt: MonadTrans[[M[_], A] =>> T[M, A], M]): T[M, A]","d":"meow/control/trans/MonadTrans$","k":"def"},
{"l":"api/meow/control/trans/OptionT$.html","n":"OptionT","t":"object OptionT","d":"meow/control/trans/OptionT$","k":"object"},
{"l":"api/meow/control/trans/OptionT$$given_Applicative_OptionT.html","n":"given_Applicative_OptionT","t":"given given_Applicative_OptionT[M[_]](implicit evidence$1: Functor[M], val apM: Applicative[M]): Applicative[[_] =>> OptionT[M, _$5]]","d":"meow/control/trans/OptionT$","k":"given"},
{"l":"api/meow/control/trans/OptionT$$given_Applicative_OptionT.html","n":"apM","t":"val apM: Applicative[M]","d":"meow/control/trans/OptionT$","k":"val"},
{"l":"api/meow/control/trans/OptionT$$given_Applicative_OptionT.html","n":"liftA2","t":"def liftA2[A, B, C](f: A => B => C): OptionT[M, A] => OptionT[M, B] => OptionT[M, C]","d":"meow/control/trans/OptionT$","k":"def"},
{"l":"api/meow/control/trans/OptionT$$given_Applicative_OptionT.html","n":"pure","t":"def pure[A](a: A): OptionT[M, A]","d":"meow/control/trans/OptionT$","k":"def"},
{"l":"api/meow/control/trans/OptionT$$given_Functor_OptionT.html","n":"given_Functor_OptionT","t":"given given_Functor_OptionT[M[_]](using val functorM: Functor[M], val functorO: Functor[[A] =>> Option[A]]): Functor[[_] =>> OptionT[M, _$3]]","d":"meow/control/trans/OptionT$","k":"given"},
{"l":"api/meow/control/trans/OptionT$$given_Functor_OptionT.html","n":"fmap","t":"def fmap[A, B](f: A => B): OptionT[M, A] => OptionT[M, B]","d":"meow/control/trans/OptionT$","k":"def"},
{"l":"api/meow/control/trans/OptionT$$given_Functor_OptionT.html","n":"functorM","t":"val functorM: Functor[M]","d":"meow/control/trans/OptionT$","k":"val"},
{"l":"api/meow/control/trans/OptionT$$given_Functor_OptionT.html","n":"functorO","t":"val functorO: Functor[[A] =>> Option[A]]","d":"meow/control/trans/OptionT$","k":"val"},
{"l":"api/meow/control/trans/OptionT$$given_MonadError_E_OptionT.html","n":"given_MonadError_E_OptionT","t":"given given_MonadError_E_OptionT[E, M[_]](implicit evidence$4: Functor[M], evidence$5: Applicative[M], evidence$6: Monad[M], val me: MonadError[E, M]): MonadError[E, [_] =>> OptionT[M, _$9]]","d":"meow/control/trans/OptionT$","k":"given"},
{"l":"api/meow/control/trans/OptionT$$given_MonadError_E_OptionT.html","n":"catchError","t":"def catchError[A](ma: OptionT[M, A]): E => OptionT[M, A] => OptionT[M, A]","d":"meow/control/trans/OptionT$","k":"def"},
{"l":"api/meow/control/trans/OptionT$$given_MonadError_E_OptionT.html","n":"me","t":"val me: MonadError[E, M]","d":"meow/control/trans/OptionT$","k":"val"},
{"l":"api/meow/control/trans/OptionT$$given_MonadError_E_OptionT.html","n":"throwError","t":"def throwError[A](e: E): OptionT[M, A]","d":"meow/control/trans/OptionT$","k":"def"},
{"l":"api/meow/control/trans/OptionT$$given_MonadReader_R_OptionT.html","n":"given_MonadReader_R_OptionT","t":"given given_MonadReader_R_OptionT[R, M[_]](implicit evidence$10: Monad[M], evidence$11: Applicative[M], evidence$12: Functor[M], val readM: MonadReader[R, M]): MonadReader[R, [_] =>> OptionT[M, _$12]]","d":"meow/control/trans/OptionT$","k":"given"},
{"l":"api/meow/control/trans/OptionT$$given_MonadReader_R_OptionT.html","n":"ask","t":"def ask: OptionT[M, R]","d":"meow/control/trans/OptionT$","k":"def"},
{"l":"api/meow/control/trans/OptionT$$given_MonadReader_R_OptionT.html","n":"local","t":"def local[A](rr: R => R): OptionT[M, A] => OptionT[M, A]","d":"meow/control/trans/OptionT$","k":"def"},
{"l":"api/meow/control/trans/OptionT$$given_MonadReader_R_OptionT.html","n":"readM","t":"val readM: MonadReader[R, M]","d":"meow/control/trans/OptionT$","k":"val"},
{"l":"api/meow/control/trans/OptionT$$given_MonadTrans_OptionT_M.html","n":"given_MonadTrans_OptionT_M","t":"given given_MonadTrans_OptionT_M[M[_]]: MonadTrans[OptionT, M]","d":"meow/control/trans/OptionT$","k":"given"},
{"l":"api/meow/control/trans/OptionT$$given_MonadTrans_OptionT_M.html","n":"lift","t":"def lift[A](ma: M[A]): OptionT[M, A]","d":"meow/control/trans/OptionT$","k":"def"},
{"l":"api/meow/control/trans/OptionT$$given_Monad_OptionT.html","n":"given_Monad_OptionT","t":"given given_Monad_OptionT[M[_]](implicit evidence$2: Applicative[M], evidence$3: Functor[M], val monad: Monad[M]): Monad[[_] =>> OptionT[M, _$7]]","d":"meow/control/trans/OptionT$","k":"given"},
{"l":"api/meow/control/trans/OptionT$$given_Monad_OptionT.html","n":"bind","t":"def bind[A, B](f: A => OptionT[M, B]): OptionT[M, A] => OptionT[M, B]","d":"meow/control/trans/OptionT$","k":"def"},
{"l":"api/meow/control/trans/OptionT$$given_Monad_OptionT.html","n":"monad","t":"val monad: Monad[M]","d":"meow/control/trans/OptionT$","k":"val"},
{"l":"api/meow/control/trans/OptionT$$given_Applicative_OptionT.html","n":"given_Applicative_OptionT","t":"given given_Applicative_OptionT[M[_]](implicit evidence$1: Functor[M], val apM: Applicative[M]): Applicative[[_] =>> OptionT[M, _$5]]","d":"meow/control/trans/OptionT$$given_Applicative_OptionT","k":"given"},
{"l":"api/meow/control/trans/OptionT$$given_Applicative_OptionT.html","n":"apM","t":"val apM: Applicative[M]","d":"meow/control/trans/OptionT$$given_Applicative_OptionT","k":"val"},
{"l":"api/meow/control/trans/OptionT$$given_Applicative_OptionT.html","n":"liftA2","t":"def liftA2[A, B, C](f: A => B => C): OptionT[M, A] => OptionT[M, B] => OptionT[M, C]","d":"meow/control/trans/OptionT$$given_Applicative_OptionT","k":"def"},
{"l":"api/meow/control/trans/OptionT$$given_Applicative_OptionT.html","n":"pure","t":"def pure[A](a: A): OptionT[M, A]","d":"meow/control/trans/OptionT$$given_Applicative_OptionT","k":"def"},
{"l":"api/meow/control/trans/OptionT$$given_Functor_OptionT.html","n":"given_Functor_OptionT","t":"given given_Functor_OptionT[M[_]](using val functorM: Functor[M], val functorO: Functor[[A] =>> Option[A]]): Functor[[_] =>> OptionT[M, _$3]]","d":"meow/control/trans/OptionT$$given_Functor_OptionT","k":"given"},
{"l":"api/meow/control/trans/OptionT$$given_Functor_OptionT.html","n":"fmap","t":"def fmap[A, B](f: A => B): OptionT[M, A] => OptionT[M, B]","d":"meow/control/trans/OptionT$$given_Functor_OptionT","k":"def"},
{"l":"api/meow/control/trans/OptionT$$given_Functor_OptionT.html","n":"functorM","t":"val functorM: Functor[M]","d":"meow/control/trans/OptionT$$given_Functor_OptionT","k":"val"},
{"l":"api/meow/control/trans/OptionT$$given_Functor_OptionT.html","n":"functorO","t":"val functorO: Functor[[A] =>> Option[A]]","d":"meow/control/trans/OptionT$$given_Functor_OptionT","k":"val"},
{"l":"api/meow/control/trans/OptionT$$given_MonadError_E_OptionT.html","n":"given_MonadError_E_OptionT","t":"given given_MonadError_E_OptionT[E, M[_]](implicit evidence$4: Functor[M], evidence$5: Applicative[M], evidence$6: Monad[M], val me: MonadError[E, M]): MonadError[E, [_] =>> OptionT[M, _$9]]","d":"meow/control/trans/OptionT$$given_MonadError_E_OptionT","k":"given"},
{"l":"api/meow/control/trans/OptionT$$given_MonadError_E_OptionT.html","n":"catchError","t":"def catchError[A](ma: OptionT[M, A]): E => OptionT[M, A] => OptionT[M, A]","d":"meow/control/trans/OptionT$$given_MonadError_E_OptionT","k":"def"},
{"l":"api/meow/control/trans/OptionT$$given_MonadError_E_OptionT.html","n":"me","t":"val me: MonadError[E, M]","d":"meow/control/trans/OptionT$$given_MonadError_E_OptionT","k":"val"},
{"l":"api/meow/control/trans/OptionT$$given_MonadError_E_OptionT.html","n":"throwError","t":"def throwError[A](e: E): OptionT[M, A]","d":"meow/control/trans/OptionT$$given_MonadError_E_OptionT","k":"def"},
{"l":"api/meow/control/trans/OptionT$$given_MonadReader_R_OptionT.html","n":"given_MonadReader_R_OptionT","t":"given given_MonadReader_R_OptionT[R, M[_]](implicit evidence$10: Monad[M], evidence$11: Applicative[M], evidence$12: Functor[M], val readM: MonadReader[R, M]): MonadReader[R, [_] =>> OptionT[M, _$12]]","d":"meow/control/trans/OptionT$$given_MonadReader_R_OptionT","k":"given"},
{"l":"api/meow/control/trans/OptionT$$given_MonadReader_R_OptionT.html","n":"ask","t":"def ask: OptionT[M, R]","d":"meow/control/trans/OptionT$$given_MonadReader_R_OptionT","k":"def"},
{"l":"api/meow/control/trans/OptionT$$given_MonadReader_R_OptionT.html","n":"local","t":"def local[A](rr: R => R): OptionT[M, A] => OptionT[M, A]","d":"meow/control/trans/OptionT$$given_MonadReader_R_OptionT","k":"def"},
{"l":"api/meow/control/trans/OptionT$$given_MonadReader_R_OptionT.html","n":"readM","t":"val readM: MonadReader[R, M]","d":"meow/control/trans/OptionT$$given_MonadReader_R_OptionT","k":"val"},
{"l":"api/meow/control/trans/OptionT$$given_MonadTrans_OptionT_M.html","n":"given_MonadTrans_OptionT_M","t":"given given_MonadTrans_OptionT_M[M[_]]: MonadTrans[OptionT, M]","d":"meow/control/trans/OptionT$$given_MonadTrans_OptionT_M","k":"given"},
{"l":"api/meow/control/trans/OptionT$$given_MonadTrans_OptionT_M.html","n":"lift","t":"def lift[A](ma: M[A]): OptionT[M, A]","d":"meow/control/trans/OptionT$$given_MonadTrans_OptionT_M","k":"def"},
{"l":"api/meow/control/trans/OptionT$$given_Monad_OptionT.html","n":"given_Monad_OptionT","t":"given given_Monad_OptionT[M[_]](implicit evidence$2: Applicative[M], evidence$3: Functor[M], val monad: Monad[M]): Monad[[_] =>> OptionT[M, _$7]]","d":"meow/control/trans/OptionT$$given_Monad_OptionT","k":"given"},
{"l":"api/meow/control/trans/OptionT$$given_Monad_OptionT.html","n":"bind","t":"def bind[A, B](f: A => OptionT[M, B]): OptionT[M, A] => OptionT[M, B]","d":"meow/control/trans/OptionT$$given_Monad_OptionT","k":"def"},
{"l":"api/meow/control/trans/OptionT$$given_Monad_OptionT.html","n":"monad","t":"val monad: Monad[M]","d":"meow/control/trans/OptionT$$given_Monad_OptionT","k":"val"},
{"l":"api/meow/control/trans/ReaderT$.html","n":"ReaderT","t":"object ReaderT","d":"meow/control/trans/ReaderT$","k":"object"},
{"l":"api/meow/control/trans/ReaderT$.html","n":"ask","t":"def ask[R, M[_]](using apM: Applicative[M]): (R, M) => R","d":"meow/control/trans/ReaderT$","k":"def"},
{"l":"api/meow/control/trans/ReaderT$$given_Applicative_ReaderT.html","n":"given_Applicative_ReaderT","t":"given given_Applicative_ReaderT[R, M[_]](implicit evidence$1: Functor[M], val apM: Applicative[M]): Applicative[[_] =>> (R, M) => _$6]","d":"meow/control/trans/ReaderT$","k":"given"},
{"l":"api/meow/control/trans/ReaderT$$given_Applicative_ReaderT.html","n":"apM","t":"val apM: Applicative[M]","d":"meow/control/trans/ReaderT$","k":"val"},
{"l":"api/meow/control/trans/ReaderT$$given_Applicative_ReaderT.html","n":"liftA2","t":"def liftA2[A, B, C](f: A => B => C): ReaderT[R, M, A] => ReaderT[R, M, B] => ReaderT[R, M, C]","d":"meow/control/trans/ReaderT$","k":"def"},
{"l":"api/meow/control/trans/ReaderT$$given_Applicative_ReaderT.html","n":"pure","t":"def pure[A](a: A): ReaderT[R, M, A]","d":"meow/control/trans/ReaderT$","k":"def"},
{"l":"api/meow/control/trans/ReaderT$$given_Functor_ReaderT.html","n":"given_Functor_ReaderT","t":"given given_Functor_ReaderT[R, M[_]](using val functorM: Functor[M]): Functor[[_] =>> (R, M) => _$4]","d":"meow/control/trans/ReaderT$","k":"given"},
{"l":"api/meow/control/trans/ReaderT$$given_Functor_ReaderT.html","n":"fmap","t":"def fmap[A, B](f: A => B): ReaderT[R, M, A] => ReaderT[R, M, B]","d":"meow/control/trans/ReaderT$","k":"def"},
{"l":"api/meow/control/trans/ReaderT$$given_Functor_ReaderT.html","n":"functorM","t":"val functorM: Functor[M]","d":"meow/control/trans/ReaderT$","k":"val"},
{"l":"api/meow/control/trans/ReaderT$$given_MonadError_E_ReaderT.html","n":"given_MonadError_E_ReaderT","t":"given given_MonadError_E_ReaderT[E, R, M[_]](implicit evidence$7: Applicative[M], evidence$8: Functor[M], evidence$9: Monad[M], val me: MonadError[E, M], val mt: MonadTrans[[M[_], A] =>> (R, M) => A, M]): MonadError[E, [_] =>> (R, M) => _$13]","d":"meow/control/trans/ReaderT$","k":"given"},
{"l":"api/meow/control/trans/ReaderT$$given_MonadError_E_ReaderT.html","n":"catchError","t":"def catchError[A](ma: ReaderT[R, M, A]): E => ReaderT[R, M, A] => ReaderT[R, M, A]","d":"meow/control/trans/ReaderT$","k":"def"},
{"l":"api/meow/control/trans/ReaderT$$given_MonadError_E_ReaderT.html","n":"me","t":"val me: MonadError[E, M]","d":"meow/control/trans/ReaderT$","k":"val"},
{"l":"api/meow/control/trans/ReaderT$$given_MonadError_E_ReaderT.html","n":"mt","t":"val mt: MonadTrans[[M[_], A] =>> ReaderT[R, M, A], M]","d":"meow/control/trans/ReaderT$","k":"val"},
{"l":"api/meow/control/trans/ReaderT$$given_MonadError_E_ReaderT.html","n":"throwError","t":"def throwError[A](e: E): ReaderT[R, M, A]","d":"meow/control/trans/ReaderT$","k":"def"},
{"l":"api/meow/control/trans/ReaderT$$given_MonadReader_R_ReaderT.html","n":"given_MonadReader_R_ReaderT","t":"given given_MonadReader_R_ReaderT[R, M[_]]: MonadReader[R, [_] =>> (R, M) => _$15]","d":"meow/control/trans/ReaderT$","k":"given"},
{"l":"api/meow/control/trans/ReaderT$$given_MonadReader_R_ReaderT.html","n":"ask","t":"def ask: ReaderT[R, M, R]","d":"meow/control/trans/ReaderT$","k":"def"},
{"l":"api/meow/control/trans/ReaderT$$given_MonadReader_R_ReaderT.html","n":"local","t":"def local[A](rr: R => R): ReaderT[R, M, A] => ReaderT[R, M, A]","d":"meow/control/trans/ReaderT$","k":"def"},
{"l":"api/meow/control/trans/ReaderT$$given_MonadTrans_ReaderT_M.html","n":"given_MonadTrans_ReaderT_M","t":"given given_MonadTrans_ReaderT_M[M[_], R]: MonadTrans[[M[_], A] =>> (R, M) => A, M]","d":"meow/control/trans/ReaderT$","k":"given"},
{"l":"api/meow/control/trans/ReaderT$$given_MonadTrans_ReaderT_M.html","n":"lift","t":"def lift[A](ma: M[A]): ReaderT[R, M, A]","d":"meow/control/trans/ReaderT$","k":"def"},
{"l":"api/meow/control/trans/ReaderT$$given_Monad_ReaderT.html","n":"given_Monad_ReaderT","t":"given given_Monad_ReaderT[R, M[_]](implicit evidence$2: Applicative[M], evidence$3: Functor[M], val monad: Monad[M]): Monad[[_] =>> (R, M) => _$8]","d":"meow/control/trans/ReaderT$","k":"given"},
{"l":"api/meow/control/trans/ReaderT$$given_Monad_ReaderT.html","n":"bind","t":"def bind[A, B](f: A => ReaderT[R, M, B]): ReaderT[R, M, A] => ReaderT[R, M, B]","d":"meow/control/trans/ReaderT$","k":"def"},
{"l":"api/meow/control/trans/ReaderT$$given_Monad_ReaderT.html","n":"monad","t":"val monad: Monad[M]","d":"meow/control/trans/ReaderT$","k":"val"},
{"l":"api/meow/control/trans/ReaderT$$given_Semigroup_ReaderT.html","n":"given_Semigroup_ReaderT","t":"given given_Semigroup_ReaderT[A, B, M[_]](implicit evidence$13: Semigroup[B], val x$1: Semigroup[M[B]]): Semigroup[(A, M) => B]","d":"meow/control/trans/ReaderT$","k":"given"},
{"l":"api/meow/control/trans/ReaderT$$given_Semigroup_ReaderT.html","n":"scombine","t":"def scombine(fx: ReaderT[A, M, B], fy: ReaderT[A, M, B]): ReaderT[A, M, B]","d":"meow/control/trans/ReaderT$","k":"def"},
{"l":"api/meow/control/trans/ReaderT$$given_Semigroup_ReaderT.html","n":"x$1","t":"val x$1: Semigroup[M[B]]","d":"meow/control/trans/ReaderT$","k":"val"},
{"l":"api/meow/control/trans/ReaderT$$given_Applicative_ReaderT.html","n":"given_Applicative_ReaderT","t":"given given_Applicative_ReaderT[R, M[_]](implicit evidence$1: Functor[M], val apM: Applicative[M]): Applicative[[_] =>> (R, M) => _$6]","d":"meow/control/trans/ReaderT$$given_Applicative_ReaderT","k":"given"},
{"l":"api/meow/control/trans/ReaderT$$given_Applicative_ReaderT.html","n":"apM","t":"val apM: Applicative[M]","d":"meow/control/trans/ReaderT$$given_Applicative_ReaderT","k":"val"},
{"l":"api/meow/control/trans/ReaderT$$given_Applicative_ReaderT.html","n":"liftA2","t":"def liftA2[A, B, C](f: A => B => C): ReaderT[R, M, A] => ReaderT[R, M, B] => ReaderT[R, M, C]","d":"meow/control/trans/ReaderT$$given_Applicative_ReaderT","k":"def"},
{"l":"api/meow/control/trans/ReaderT$$given_Applicative_ReaderT.html","n":"pure","t":"def pure[A](a: A): ReaderT[R, M, A]","d":"meow/control/trans/ReaderT$$given_Applicative_ReaderT","k":"def"},
{"l":"api/meow/control/trans/ReaderT$$given_Functor_ReaderT.html","n":"given_Functor_ReaderT","t":"given given_Functor_ReaderT[R, M[_]](using val functorM: Functor[M]): Functor[[_] =>> (R, M) => _$4]","d":"meow/control/trans/ReaderT$$given_Functor_ReaderT","k":"given"},
{"l":"api/meow/control/trans/ReaderT$$given_Functor_ReaderT.html","n":"fmap","t":"def fmap[A, B](f: A => B): ReaderT[R, M, A] => ReaderT[R, M, B]","d":"meow/control/trans/ReaderT$$given_Functor_ReaderT","k":"def"},
{"l":"api/meow/control/trans/ReaderT$$given_Functor_ReaderT.html","n":"functorM","t":"val functorM: Functor[M]","d":"meow/control/trans/ReaderT$$given_Functor_ReaderT","k":"val"},
{"l":"api/meow/control/trans/ReaderT$$given_MonadError_E_ReaderT.html","n":"given_MonadError_E_ReaderT","t":"given given_MonadError_E_ReaderT[E, R, M[_]](implicit evidence$7: Applicative[M], evidence$8: Functor[M], evidence$9: Monad[M], val me: MonadError[E, M], val mt: MonadTrans[[M[_], A] =>> (R, M) => A, M]): MonadError[E, [_] =>> (R, M) => _$13]","d":"meow/control/trans/ReaderT$$given_MonadError_E_ReaderT","k":"given"},
{"l":"api/meow/control/trans/ReaderT$$given_MonadError_E_ReaderT.html","n":"catchError","t":"def catchError[A](ma: ReaderT[R, M, A]): E => ReaderT[R, M, A] => ReaderT[R, M, A]","d":"meow/control/trans/ReaderT$$given_MonadError_E_ReaderT","k":"def"},
{"l":"api/meow/control/trans/ReaderT$$given_MonadError_E_ReaderT.html","n":"me","t":"val me: MonadError[E, M]","d":"meow/control/trans/ReaderT$$given_MonadError_E_ReaderT","k":"val"},
{"l":"api/meow/control/trans/ReaderT$$given_MonadError_E_ReaderT.html","n":"mt","t":"val mt: MonadTrans[[M[_], A] =>> ReaderT[R, M, A], M]","d":"meow/control/trans/ReaderT$$given_MonadError_E_ReaderT","k":"val"},
{"l":"api/meow/control/trans/ReaderT$$given_MonadError_E_ReaderT.html","n":"throwError","t":"def throwError[A](e: E): ReaderT[R, M, A]","d":"meow/control/trans/ReaderT$$given_MonadError_E_ReaderT","k":"def"},
{"l":"api/meow/control/trans/ReaderT$$given_MonadReader_R_ReaderT.html","n":"given_MonadReader_R_ReaderT","t":"given given_MonadReader_R_ReaderT[R, M[_]]: MonadReader[R, [_] =>> (R, M) => _$15]","d":"meow/control/trans/ReaderT$$given_MonadReader_R_ReaderT","k":"given"},
{"l":"api/meow/control/trans/ReaderT$$given_MonadReader_R_ReaderT.html","n":"ask","t":"def ask: ReaderT[R, M, R]","d":"meow/control/trans/ReaderT$$given_MonadReader_R_ReaderT","k":"def"},
{"l":"api/meow/control/trans/ReaderT$$given_MonadReader_R_ReaderT.html","n":"local","t":"def local[A](rr: R => R): ReaderT[R, M, A] => ReaderT[R, M, A]","d":"meow/control/trans/ReaderT$$given_MonadReader_R_ReaderT","k":"def"},
{"l":"api/meow/control/trans/ReaderT$$given_MonadTrans_ReaderT_M.html","n":"given_MonadTrans_ReaderT_M","t":"given given_MonadTrans_ReaderT_M[M[_], R]: MonadTrans[[M[_], A] =>> (R, M) => A, M]","d":"meow/control/trans/ReaderT$$given_MonadTrans_ReaderT_M","k":"given"},
{"l":"api/meow/control/trans/ReaderT$$given_MonadTrans_ReaderT_M.html","n":"lift","t":"def lift[A](ma: M[A]): ReaderT[R, M, A]","d":"meow/control/trans/ReaderT$$given_MonadTrans_ReaderT_M","k":"def"},
{"l":"api/meow/control/trans/ReaderT$$given_Monad_ReaderT.html","n":"given_Monad_ReaderT","t":"given given_Monad_ReaderT[R, M[_]](implicit evidence$2: Applicative[M], evidence$3: Functor[M], val monad: Monad[M]): Monad[[_] =>> (R, M) => _$8]","d":"meow/control/trans/ReaderT$$given_Monad_ReaderT","k":"given"},
{"l":"api/meow/control/trans/ReaderT$$given_Monad_ReaderT.html","n":"bind","t":"def bind[A, B](f: A => ReaderT[R, M, B]): ReaderT[R, M, A] => ReaderT[R, M, B]","d":"meow/control/trans/ReaderT$$given_Monad_ReaderT","k":"def"},
{"l":"api/meow/control/trans/ReaderT$$given_Monad_ReaderT.html","n":"monad","t":"val monad: Monad[M]","d":"meow/control/trans/ReaderT$$given_Monad_ReaderT","k":"val"},
{"l":"api/meow/control/trans/ReaderT$$given_Semigroup_ReaderT.html","n":"given_Semigroup_ReaderT","t":"given given_Semigroup_ReaderT[A, B, M[_]](implicit evidence$13: Semigroup[B], val x$1: Semigroup[M[B]]): Semigroup[(A, M) => B]","d":"meow/control/trans/ReaderT$$given_Semigroup_ReaderT","k":"given"},
{"l":"api/meow/control/trans/ReaderT$$given_Semigroup_ReaderT.html","n":"scombine","t":"def scombine(fx: ReaderT[A, M, B], fy: ReaderT[A, M, B]): ReaderT[A, M, B]","d":"meow/control/trans/ReaderT$$given_Semigroup_ReaderT","k":"def"},
{"l":"api/meow/control/trans/ReaderT$$given_Semigroup_ReaderT.html","n":"x$1","t":"val x$1: Semigroup[M[B]]","d":"meow/control/trans/ReaderT$$given_Semigroup_ReaderT","k":"val"},
{"l":"api/meow/data.html","n":"meow.data","t":"package meow.data","d":"meow/data","k":"package"},
{"l":"api/meow/data.html","n":"Identity","t":"type Identity[A]","d":"meow/data","k":"type"},
{"l":"api/meow/data/Functor.html","n":"Functor","t":"trait Functor[F[_]]","d":"meow/data/Functor","k":"trait"},
{"l":"api/meow/data/Functor.html","n":"$>","t":"def $>[A, B](a: B): F[B]","d":"meow/data/Functor","k":"def"},
{"l":"api/meow/data/Functor.html","n":"<#>","t":"def <#>[A, B](f: A => B): F[B]","d":"meow/data/Functor","k":"def"},
{"l":"api/meow/data/Functor.html","n":"fmap","t":"def fmap[A, B](f: A => B): F[A] => F[B]","d":"meow/data/Functor","k":"def"},
{"l":"api/meow/data/Functor.html","n":"map","t":"def map[A, B](f: A => B): F[B]","d":"meow/data/Functor","k":"def"},
{"l":"api/meow/data/Functor.html","n":"void","t":"def void[A, B]: F[Unit]","d":"meow/data/Functor","k":"def"},
{"l":"api/meow/data/Functor$.html","n":"Functor","t":"object Functor","d":"meow/data/Functor$","k":"object"},
{"l":"api/meow/data/Functor$.html","n":"<$","t":"def <$[F[_], A, B](fb: F[B])(using Functor[F]): F[A]","d":"meow/data/Functor$","k":"def"},
{"l":"api/meow/data/Functor$.html","n":"<$>","t":"def <$>[F[_], A, B](fa: F[A])(using Functor[F]): F[B]","d":"meow/data/Functor$","k":"def"},
{"l":"api/meow/data/Functor$.html","n":"derived","t":"def derived[F[_]](using m: K1[F]): Functor[F]","d":"meow/data/Functor$","k":"def"},
{"l":"api/meow/data/Functor$.html","n":"genFunctor","t":"given genFunctor","d":"meow/data/Functor$","k":"given"},
{"l":"api/meow/data/Functor$$given_Functor_Const.html","n":"given_Functor_Const","t":"given given_Functor_Const[Y[_], Z]: Functor[Const[Y[Z]]]","d":"meow/data/Functor$","k":"given"},
{"l":"api/meow/data/Functor$$given_Functor_Const.html","n":"fmap","t":"def fmap[A, B](f: A => B): Const[Y[Z]][A] => Const[Y[Z]][B]","d":"meow/data/Functor$","k":"def"},
{"l":"api/meow/data/Functor$$given_Functor_Either.html","n":"given_Functor_Either","t":"given given_Functor_Either[E]: Functor[[_] =>> Either[E, _$7]]","d":"meow/data/Functor$","k":"given"},
{"l":"api/meow/data/Functor$$given_Functor_Either.html","n":"fmap","t":"def fmap[A, B](f: A => B): Either[E, A] => Either[E, B]","d":"meow/data/Functor$","k":"def"},
{"l":"api/meow/data/Functor$$given_Functor_Function.html","n":"given_Functor_Function","t":"given given_Functor_Function[R]: Functor[[_] =>> R => _$5]","d":"meow/data/Functor$","k":"given"},
{"l":"api/meow/data/Functor$$given_Functor_Function.html","n":"fmap","t":"def fmap[A, B](f: A => B): R => A => R => B","d":"meow/data/Functor$","k":"def"},
{"l":"api/meow/data/Functor$$given_Functor_Id$.html","n":"given_Functor_Id","t":"given given_Functor_Id: Functor[Id]","d":"meow/data/Functor$","k":"given"},
{"l":"api/meow/data/Functor$$given_Functor_Id$.html","n":"fmap","t":"def fmap[A, B](f: A => B): A => B","d":"meow/data/Functor$","k":"def"},
{"l":"api/meow/data/Functor$$given_Functor_List$.html","n":"given_Functor_List","t":"given given_Functor_List: Functor[List]","d":"meow/data/Functor$","k":"given"},
{"l":"api/meow/data/Functor$$given_Functor_List$.html","n":"fmap","t":"def fmap[A, B](f: A => B): List[A] => List[B]","d":"meow/data/Functor$","k":"def"},
{"l":"api/meow/data/Functor$$given_Functor_Option$.html","n":"given_Functor_Option","t":"given given_Functor_Option: Functor[[A] =>> Option[A]]","d":"meow/data/Functor$","k":"given"},
{"l":"api/meow/data/Functor$$given_Functor_Option$.html","n":"fmap","t":"def fmap[A, B](f: A => B): Option[A] => Option[B]","d":"meow/data/Functor$","k":"def"},
{"l":"api/meow/data/Functor$$given_Functor_Tuple2.html","n":"given_Functor_Tuple2","t":"given given_Functor_Tuple2[R]: Functor[[_] =>> (R, _$6)]","d":"meow/data/Functor$","k":"given"},
{"l":"api/meow/data/Functor$$given_Functor_Tuple2.html","n":"fmap","t":"def fmap[A, B](f: A => B): (R, A) => (R, B)","d":"meow/data/Functor$","k":"def"},
{"l":"api/meow/data/Functor$$given_Functor_Vector$.html","n":"given_Functor_Vector","t":"given given_Functor_Vector: Functor[Vector]","d":"meow/data/Functor$","k":"given"},
{"l":"api/meow/data/Functor$$given_Functor_Vector$.html","n":"fmap","t":"def fmap[A, B](f: A => B): Vector[A] => Vector[B]","d":"meow/data/Functor$","k":"def"},
{"l":"api/meow/data/Functor$.html","n":"map","t":"def map[F[_]]: [A, B] => (f: A => B) => Functor[F] => F[A] => F[B]","d":"meow/data/Functor$","k":"def"},
{"l":"api/meow/data/Functor$$given_Functor_Const.html","n":"given_Functor_Const","t":"given given_Functor_Const[Y[_], Z]: Functor[Const[Y[Z]]]","d":"meow/data/Functor$$given_Functor_Const","k":"given"},
{"l":"api/meow/data/Functor$$given_Functor_Const.html","n":"fmap","t":"def fmap[A, B](f: A => B): Const[Y[Z]][A] => Const[Y[Z]][B]","d":"meow/data/Functor$$given_Functor_Const","k":"def"},
{"l":"api/meow/data/Functor$$given_Functor_Either.html","n":"given_Functor_Either","t":"given given_Functor_Either[E]: Functor[[_] =>> Either[E, _$7]]","d":"meow/data/Functor$$given_Functor_Either","k":"given"},
{"l":"api/meow/data/Functor$$given_Functor_Either.html","n":"fmap","t":"def fmap[A, B](f: A => B): Either[E, A] => Either[E, B]","d":"meow/data/Functor$$given_Functor_Either","k":"def"},
{"l":"api/meow/data/Functor$$given_Functor_Function.html","n":"given_Functor_Function","t":"given given_Functor_Function[R]: Functor[[_] =>> R => _$5]","d":"meow/data/Functor$$given_Functor_Function","k":"given"},
{"l":"api/meow/data/Functor$$given_Functor_Function.html","n":"fmap","t":"def fmap[A, B](f: A => B): R => A => R => B","d":"meow/data/Functor$$given_Functor_Function","k":"def"},
{"l":"api/meow/data/Functor$$given_Functor_Id$.html","n":"given_Functor_Id","t":"given given_Functor_Id: Functor[Id]","d":"meow/data/Functor$$given_Functor_Id$","k":"given"},
{"l":"api/meow/data/Functor$$given_Functor_Id$.html","n":"fmap","t":"def fmap[A, B](f: A => B): A => B","d":"meow/data/Functor$$given_Functor_Id$","k":"def"},
{"l":"api/meow/data/Functor$$given_Functor_List$.html","n":"given_Functor_List","t":"given given_Functor_List: Functor[List]","d":"meow/data/Functor$$given_Functor_List$","k":"given"},
{"l":"api/meow/data/Functor$$given_Functor_List$.html","n":"fmap","t":"def fmap[A, B](f: A => B): List[A] => List[B]","d":"meow/data/Functor$$given_Functor_List$","k":"def"},
{"l":"api/meow/data/Functor$$given_Functor_Option$.html","n":"given_Functor_Option","t":"given given_Functor_Option: Functor[[A] =>> Option[A]]","d":"meow/data/Functor$$given_Functor_Option$","k":"given"},
{"l":"api/meow/data/Functor$$given_Functor_Option$.html","n":"fmap","t":"def fmap[A, B](f: A => B): Option[A] => Option[B]","d":"meow/data/Functor$$given_Functor_Option$","k":"def"},
{"l":"api/meow/data/Functor$$given_Functor_Tuple2.html","n":"given_Functor_Tuple2","t":"given given_Functor_Tuple2[R]: Functor[[_] =>> (R, _$6)]","d":"meow/data/Functor$$given_Functor_Tuple2","k":"given"},
{"l":"api/meow/data/Functor$$given_Functor_Tuple2.html","n":"fmap","t":"def fmap[A, B](f: A => B): (R, A) => (R, B)","d":"meow/data/Functor$$given_Functor_Tuple2","k":"def"},
{"l":"api/meow/data/Functor$$given_Functor_Vector$.html","n":"given_Functor_Vector","t":"given given_Functor_Vector: Functor[Vector]","d":"meow/data/Functor$$given_Functor_Vector$","k":"given"},
{"l":"api/meow/data/Functor$$given_Functor_Vector$.html","n":"fmap","t":"def fmap[A, B](f: A => B): Vector[A] => Vector[B]","d":"meow/data/Functor$$given_Functor_Vector$","k":"def"},
{"l":"api/meow/data/Monoid.html","n":"Monoid","t":"trait Monoid[A]","d":"meow/data/Monoid","k":"trait"},
{"l":"api/meow/data/Monoid.html","n":"mconcat","t":"def mconcat(l: List[A]): A","d":"meow/data/Monoid","k":"def"},
{"l":"api/meow/data/Monoid.html","n":"mempty","t":"def mempty: A","d":"meow/data/Monoid","k":"def"},
{"l":"api/meow/data/Monoid$.html","n":"Monoid","t":"object Monoid","d":"meow/data/Monoid$","k":"object"},
{"l":"api/meow/data/Monoid$.html","n":"derived","t":"given derived","d":"meow/data/Monoid$","k":"given"},
{"l":"api/meow/data/Monoid$$given_Monoid_List.html","n":"given_Monoid_List","t":"given given_Monoid_List[A]: Monoid[List[A]]","d":"meow/data/Monoid$","k":"given"},
{"l":"api/meow/data/Monoid$$given_Monoid_List.html","n":"mempty","t":"def mempty: List[A]","d":"meow/data/Monoid$","k":"def"},
{"l":"api/meow/data/Monoid$$given_Monoid_Option.html","n":"given_Monoid_Option","t":"given given_Monoid_Option[A]: Monoid[Option[A]]","d":"meow/data/Monoid$","k":"given"},
{"l":"api/meow/data/Monoid$$given_Monoid_Option.html","n":"mempty","t":"def mempty: Option[A]","d":"meow/data/Monoid$","k":"def"},
{"l":"api/meow/data/Monoid$$given_Monoid_String$.html","n":"given_Monoid_String","t":"given given_Monoid_String: Monoid[String]","d":"meow/data/Monoid$","k":"given"},
{"l":"api/meow/data/Monoid$$given_Monoid_String$.html","n":"mempty","t":"def mempty: String","d":"meow/data/Monoid$","k":"def"},
{"l":"api/meow/data/Monoid$$given_Monoid_Unit$.html","n":"given_Monoid_Unit","t":"given given_Monoid_Unit: Monoid[Unit]","d":"meow/data/Monoid$","k":"given"},
{"l":"api/meow/data/Monoid$$given_Monoid_Unit$.html","n":"mempty","t":"def mempty: Unit","d":"meow/data/Monoid$","k":"def"},
{"l":"api/meow/data/Monoid$$given_Monoid_Vector.html","n":"given_Monoid_Vector","t":"given given_Monoid_Vector[A]: Monoid[Vector[A]]","d":"meow/data/Monoid$","k":"given"},
{"l":"api/meow/data/Monoid$$given_Monoid_Vector.html","n":"mempty","t":"def mempty: Vector[A]","d":"meow/data/Monoid$","k":"def"},
{"l":"api/meow/data/Monoid$.html","n":"mempty","t":"def mempty[A](using m: Monoid[A]): A","d":"meow/data/Monoid$","k":"def"},
{"l":"api/meow/data/Monoid$$given_Monoid_List.html","n":"given_Monoid_List","t":"given given_Monoid_List[A]: Monoid[List[A]]","d":"meow/data/Monoid$$given_Monoid_List","k":"given"},
{"l":"api/meow/data/Monoid$$given_Monoid_List.html","n":"mempty","t":"def mempty: List[A]","d":"meow/data/Monoid$$given_Monoid_List","k":"def"},
{"l":"api/meow/data/Monoid$$given_Monoid_Option.html","n":"given_Monoid_Option","t":"given given_Monoid_Option[A]: Monoid[Option[A]]","d":"meow/data/Monoid$$given_Monoid_Option","k":"given"},
{"l":"api/meow/data/Monoid$$given_Monoid_Option.html","n":"mempty","t":"def mempty: Option[A]","d":"meow/data/Monoid$$given_Monoid_Option","k":"def"},
{"l":"api/meow/data/Monoid$$given_Monoid_String$.html","n":"given_Monoid_String","t":"given given_Monoid_String: Monoid[String]","d":"meow/data/Monoid$$given_Monoid_String$","k":"given"},
{"l":"api/meow/data/Monoid$$given_Monoid_String$.html","n":"mempty","t":"def mempty: String","d":"meow/data/Monoid$$given_Monoid_String$","k":"def"},
{"l":"api/meow/data/Monoid$$given_Monoid_Unit$.html","n":"given_Monoid_Unit","t":"given given_Monoid_Unit: Monoid[Unit]","d":"meow/data/Monoid$$given_Monoid_Unit$","k":"given"},
{"l":"api/meow/data/Monoid$$given_Monoid_Unit$.html","n":"mempty","t":"def mempty: Unit","d":"meow/data/Monoid$$given_Monoid_Unit$","k":"def"},
{"l":"api/meow/data/Monoid$$given_Monoid_Vector.html","n":"given_Monoid_Vector","t":"given given_Monoid_Vector[A]: Monoid[Vector[A]]","d":"meow/data/Monoid$$given_Monoid_Vector","k":"given"},
{"l":"api/meow/data/Monoid$$given_Monoid_Vector.html","n":"mempty","t":"def mempty: Vector[A]","d":"meow/data/Monoid$$given_Monoid_Vector","k":"def"},
{"l":"api/meow/data/NonEmpty.html","n":"NonEmpty","t":"class NonEmpty[A](head: A, tail: List[A])","d":"meow/data/NonEmpty","k":"class"},
{"l":"api/meow/data/NonEmpty$.html","n":"NonEmpty","t":"object NonEmpty","d":"meow/data/NonEmpty$","k":"object"},
{"l":"api/meow/data/NonEmpty$.html","n":":|","t":"def :|[A](tail: List[A]): NonEmpty[A]","d":"meow/data/NonEmpty$","k":"def"},
{"l":"api/meow/data/NonEmpty$.html","n":"derived$Functor","t":"val derived$Functor: Functor[[A] =>> NonEmpty[A]]","d":"meow/data/NonEmpty$","k":"val"},
{"l":"api/meow/data/NonEmpty$.html","n":"derived$Show","t":"given derived$Show","d":"meow/data/NonEmpty$","k":"given"},
{"l":"api/meow/data/Semigroup.html","n":"Semigroup","t":"trait Semigroup[A]","d":"meow/data/Semigroup","k":"trait"},
{"l":"api/meow/data/Semigroup.html","n":"<>","t":"def <>(y: A): A","d":"meow/data/Semigroup","k":"def"},
{"l":"api/meow/data/Semigroup.html","n":"scombine","t":"def scombine(x: A, y: A): A","d":"meow/data/Semigroup","k":"def"},
{"l":"api/meow/data/Semigroup.html","n":"sconcat","t":"def sconcat(nel: NonEmpty[A]): A","d":"meow/data/Semigroup","k":"def"},
{"l":"api/meow/data/Semigroup$.html","n":"Semigroup","t":"object Semigroup","d":"meow/data/Semigroup$","k":"object"},
{"l":"api/meow/data/Semigroup$.html","n":"derived","t":"given derived","d":"meow/data/Semigroup$","k":"given"},
{"l":"api/meow/data/Semigroup$$given_Semigroup_Function.html","n":"given_Semigroup_Function","t":"given given_Semigroup_Function[A, B]: Semigroup[A => B]","d":"meow/data/Semigroup$","k":"given"},
{"l":"api/meow/data/Semigroup$$given_Semigroup_Function.html","n":"scombine","t":"def scombine(fx: A => B, fy: A => B): A => B","d":"meow/data/Semigroup$","k":"def"},
{"l":"api/meow/data/Semigroup$$given_Semigroup_Int$.html","n":"given_Semigroup_Int","t":"given given_Semigroup_Int: Semigroup[Int]","d":"meow/data/Semigroup$","k":"given"},
{"l":"api/meow/data/Semigroup$$given_Semigroup_Int$.html","n":"scombine","t":"def scombine(x: Int, y: Int): Int","d":"meow/data/Semigroup$","k":"def"},
{"l":"api/meow/data/Semigroup$$given_Semigroup_List.html","n":"given_Semigroup_List","t":"given given_Semigroup_List[A]: Semigroup[List[A]]","d":"meow/data/Semigroup$","k":"given"},
{"l":"api/meow/data/Semigroup$$given_Semigroup_List.html","n":"scombine","t":"def scombine(x: List[A], y: List[A]): List[A]","d":"meow/data/Semigroup$","k":"def"},
{"l":"api/meow/data/Semigroup$$given_Semigroup_Option.html","n":"given_Semigroup_Option","t":"given given_Semigroup_Option[A]: Semigroup[Option[A]]","d":"meow/data/Semigroup$","k":"given"},
{"l":"api/meow/data/Semigroup$$given_Semigroup_Option.html","n":"scombine","t":"def scombine(x: Option[A], y: Option[A]): Option[A]","d":"meow/data/Semigroup$","k":"def"},
{"l":"api/meow/data/Semigroup$$given_Semigroup_String$.html","n":"given_Semigroup_String","t":"given given_Semigroup_String: Semigroup[String]","d":"meow/data/Semigroup$","k":"given"},
{"l":"api/meow/data/Semigroup$$given_Semigroup_String$.html","n":"scombine","t":"def scombine(x: String, y: String): String","d":"meow/data/Semigroup$","k":"def"},
{"l":"api/meow/data/Semigroup$$given_Semigroup_Unit$.html","n":"given_Semigroup_Unit","t":"given given_Semigroup_Unit: Semigroup[Unit]","d":"meow/data/Semigroup$","k":"given"},
{"l":"api/meow/data/Semigroup$$given_Semigroup_Unit$.html","n":"scombine","t":"def scombine(x: Unit, y: Unit): Unit","d":"meow/data/Semigroup$","k":"def"},
{"l":"api/meow/data/Semigroup$$given_Semigroup_Vector.html","n":"given_Semigroup_Vector","t":"given given_Semigroup_Vector[A]: Semigroup[Vector[A]]","d":"meow/data/Semigroup$","k":"given"},
{"l":"api/meow/data/Semigroup$$given_Semigroup_Vector.html","n":"scombine","t":"def scombine(x: Vector[A], y: Vector[A]): Vector[A]","d":"meow/data/Semigroup$","k":"def"},
{"l":"api/meow/data/Semigroup$.html","n":"scombine","t":"def scombine[A](x: A, y: A): Semigroup[A] => A","d":"meow/data/Semigroup$","k":"def"},
{"l":"api/meow/data/Semigroup$.html","n":"sconcat","t":"def sconcat[A](nel: NonEmpty[A]): Semigroup[A] => A","d":"meow/data/Semigroup$","k":"def"},
{"l":"api/meow/data/Semigroup$$given_Semigroup_Function.html","n":"given_Semigroup_Function","t":"given given_Semigroup_Function[A, B]: Semigroup[A => B]","d":"meow/data/Semigroup$$given_Semigroup_Function","k":"given"},
{"l":"api/meow/data/Semigroup$$given_Semigroup_Function.html","n":"scombine","t":"def scombine(fx: A => B, fy: A => B): A => B","d":"meow/data/Semigroup$$given_Semigroup_Function","k":"def"},
{"l":"api/meow/data/Semigroup$$given_Semigroup_Int$.html","n":"given_Semigroup_Int","t":"given given_Semigroup_Int: Semigroup[Int]","d":"meow/data/Semigroup$$given_Semigroup_Int$","k":"given"},
{"l":"api/meow/data/Semigroup$$given_Semigroup_Int$.html","n":"scombine","t":"def scombine(x: Int, y: Int): Int","d":"meow/data/Semigroup$$given_Semigroup_Int$","k":"def"},
{"l":"api/meow/data/Semigroup$$given_Semigroup_List.html","n":"given_Semigroup_List","t":"given given_Semigroup_List[A]: Semigroup[List[A]]","d":"meow/data/Semigroup$$given_Semigroup_List","k":"given"},
{"l":"api/meow/data/Semigroup$$given_Semigroup_List.html","n":"scombine","t":"def scombine(x: List[A], y: List[A]): List[A]","d":"meow/data/Semigroup$$given_Semigroup_List","k":"def"},
{"l":"api/meow/data/Semigroup$$given_Semigroup_Option.html","n":"given_Semigroup_Option","t":"given given_Semigroup_Option[A]: Semigroup[Option[A]]","d":"meow/data/Semigroup$$given_Semigroup_Option","k":"given"},
{"l":"api/meow/data/Semigroup$$given_Semigroup_Option.html","n":"scombine","t":"def scombine(x: Option[A], y: Option[A]): Option[A]","d":"meow/data/Semigroup$$given_Semigroup_Option","k":"def"},
{"l":"api/meow/data/Semigroup$$given_Semigroup_String$.html","n":"given_Semigroup_String","t":"given given_Semigroup_String: Semigroup[String]","d":"meow/data/Semigroup$$given_Semigroup_String$","k":"given"},
{"l":"api/meow/data/Semigroup$$given_Semigroup_String$.html","n":"scombine","t":"def scombine(x: String, y: String): String","d":"meow/data/Semigroup$$given_Semigroup_String$","k":"def"},
{"l":"api/meow/data/Semigroup$$given_Semigroup_Unit$.html","n":"given_Semigroup_Unit","t":"given given_Semigroup_Unit: Semigroup[Unit]","d":"meow/data/Semigroup$$given_Semigroup_Unit$","k":"given"},
{"l":"api/meow/data/Semigroup$$given_Semigroup_Unit$.html","n":"scombine","t":"def scombine(x: Unit, y: Unit): Unit","d":"meow/data/Semigroup$$given_Semigroup_Unit$","k":"def"},
{"l":"api/meow/data/Semigroup$$given_Semigroup_Vector.html","n":"given_Semigroup_Vector","t":"given given_Semigroup_Vector[A]: Semigroup[Vector[A]]","d":"meow/data/Semigroup$$given_Semigroup_Vector","k":"given"},
{"l":"api/meow/data/Semigroup$$given_Semigroup_Vector.html","n":"scombine","t":"def scombine(x: Vector[A], y: Vector[A]): Vector[A]","d":"meow/data/Semigroup$$given_Semigroup_Vector","k":"def"},
{"l":"api/meow/generic.html","n":"meow.generic","t":"package meow.generic","d":"meow/generic","k":"package"},
{"l":"api/meow/generic.html","n":"Const","t":"type Const[A] = [T] =>> A","d":"meow/generic","k":"type"},
{"l":"api/meow/generic.html","n":"Id","t":"type Id[X] = X","d":"meow/generic","k":"type"},
{"l":"api/meow/generic.html","n":"K1","t":"type K1[F[_]] = Mirror { type MirroredType = [X] =>> F[X]; type MirroredElemTypes <: ([_] =>> Tuple);  }","d":"meow/generic","k":"type"},
{"l":"api/meow/generic.html","n":"K1Product","t":"type K1Product[F[_]] = Product { type MirroredType = [X] =>> F[X]; type MirroredElemTypes <: ([_] =>> Tuple);  }","d":"meow/generic","k":"type"},
{"l":"api/meow/generic.html","n":"K1Sum","t":"type K1Sum[F[_]] = Sum { type MirroredType = [X] =>> F[X]; type MirroredElemTypes <: ([_] =>> Tuple);  }","d":"meow/generic","k":"type"},
{"l":"api/meow/generic.html","n":"LiftP","t":"type LiftP[F[_[_]], T <: ([X] =>> Tuple)] = T[Any] match {\n  case a *: _$12 => F[[X] =>> Head[T[X]]] *: LiftP[F, [X] =>> Tail[T[X]]]\n  case _$13 => EmptyTuple\n}","d":"meow/generic","k":"type"},
{"l":"api/meow/generic.html","n":"prodIterator","t":"def prodIterator[T](p: T): Iterator[Any]","d":"meow/generic","k":"def"},
{"l":"api/meow/generic.html","n":"summonAsList","t":"def summonAsList[T <: Tuple, F[_]]: List[F[Any]]","d":"meow/generic","k":"def"},
{"l":"api/meow/generic.html","n":"summonKindAsList","t":"def summonKindAsList[T <: Tuple, K[_[_]]]: List[K[[X] =>> Any]]","d":"meow/generic","k":"def"},
{"l":"index.html","n":"Meow","t":"Meow","d":"","k":"static"}];